@using FilmReview.Data
@using FilmReview.Models
@using Microsoft.AspNetCore.Mvc
@using NomaniusMVC
@inject MyContext _context

<Div Display="Display.Flex.Row">
    <Div Padding="Padding.Is1.FromStart">
        <TextEdit Text="@FilmName"  TextChanged="@FilmNameChanged" Placeholder="Название фильма" />
    </Div>
    <Div Padding="Padding.Is1.FromStart">
        <Dropdown>
            <DropdownToggle Color="Color.Success">
                Жанры
            </DropdownToggle>
            <DropdownMenu>
                @foreach (var genre in Genres)
                {
                    <DropdownItem ShowCheckbox CheckedChanged="@(()=>ChooseGenre(genre))">@genre</DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </Div>
    <Div Padding="Padding.Is1.FromStart">
        <SelectList SelectedValueChanged="ChooseCountry" TItem="string" Data="Countries" TextField="(item)=>item" ValueField="(item)=>item" TValue="string" DefaultItemText="Cтрана" DefaultItemValue="@("")" />
    </Div>
    <Div Padding="Padding.Is1.FromStart">
        <SelectList  SelectedValueChanged="ChooseMPAA" TItem="string" Data="MPAAList" TextField="(item)=>item" ValueField="(item)=>item" TValue="string" DefaultItemText="MPAA" DefaultItemValue="@("")" />
    </Div>
    <Div Padding="Padding.Is1.FromStart">
        <SelectList SelectedValueChanged="ChooseDuration" TItem="string" Data="DurationList" TextField="(item)=>item" ValueField="(item)=>item" TValue="string" DefaultItemText="Длительность" DefaultItemValue="@("")" />
    </Div>
    <Div Padding="Padding.Is1.FromStart">
        <SelectList SelectedValueChanged="ChooseYear" TItem="int" Data="YearList" TextField="@((item)=>(item.ToString()+" и более"))" ValueField="(item)=>item" TValue="int" DefaultItemText="Год выпуска" DefaultItemValue="@(-1)" />
    </Div>
    <Div Padding="Padding.Is1.FromStart">
        <SelectList SelectedValueChanged="ChooseRating" TItem="int" Data="RatingList" TextField="@((item)=>(item.ToString()+" и более"))" ValueField="(item)=>item" TValue="int" DefaultItemText="Рейтинг" DefaultItemValue="@(-1)" />
    </Div>
</Div>

<Div Class="container" Padding="Padding.Is2.FromTop" >
    @if (Films.FirstOrDefault() == null)
    {
        <Text>Таких фильмов нет</Text>
    }
    else
    {
        for (var i = 0; i < Films.Count; i += 4)
        {
            <div class="row">
                @for (var j = i; j < i + 4 && j < Films.Count; j++)
                {
                    double Rating = 0;
                    if (Films[j].Total != 0)
                        Rating = Math.Round((double)Films[j].Summ / (double)Films[j].Total, 1);
                    <div class="col" style="margin-bottom: 10px;">
                        <div class="card" style="max-width:290px;">
                            <img style="align-self:center;" src="@Films[j].FilmImageLink" alt="@error" width="190" height="250" />
                            <div class="card-body">
                                <h5 class="card-title">@Films[j].FilmName <Icon TextColor="TextColor.Success" Name="IconName.Star"></Icon> @Rating</h5>
                                <p class="card-text">@Films[j].Genres</p>
                                <a href="Home/FilmDetails/@Films[j].FilmID" class="btn btn-success">Подробнее</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</Div>

@code {
    private string FilmName;
    private string error = "Картинка фильма";
    private List<Films> Films { get; set; }
    private IEnumerable<string> Genres { get; set; }
    private IEnumerable<string> Countries { get; set; }
    private IEnumerable<string> MPAAList { get; set; }
    private IEnumerable<string> DurationList { get; set; }
    private IEnumerable<int> YearList { get; set; }
    private IEnumerable<int> RatingList { get; set; }
    private HashSet<string> SelectedGenres { get; set; }
    private string SelectedCountry { get; set; } = "";
    private string SelectedMPAA { get; set; } = "";
    private string SelectedDuration { get; set; } = "";
    private int SelectedRating { get; set; } = -1;
    private int SelectedYear { get; set; } = -1;

    protected override async Task OnInitializedAsync()
    {
        var allFilms = _context.Films.ToList();
        Films = allFilms;
        SelectedGenres = new HashSet<string>();
        var tempCountries = new HashSet<string>();
        var tempMPAAList = new HashSet<string>();
        var tempDurationList = new HashSet<string>();
        var tempYearsList = new HashSet<int>();
        var tempGenresList = new HashSet<string>();
        foreach(var p in allFilms)
        {
            tempCountries.Add(p.Country);
            tempMPAAList.Add(p.MPAA);
            tempYearsList.Add(p.Year);
            var splitGenres=p.Genres.Split(", ");
            splitGenres.ToList().ForEach(p =>tempGenresList.Add(p));
            var durationSplit = p.Duration.Split("час")[0];
                if (durationSplit[0] == '1') tempDurationList.Add(durationSplit + "час");
                else tempDurationList.Add(durationSplit + "часа");
            }
        Countries = tempCountries;
        MPAAList = tempMPAAList;
        YearList = tempYearsList.OrderBy(p => p).ToList();
        DurationList = tempDurationList.OrderBy(p=>p).ToList();
        Genres = tempGenresList;
        RatingList = new HashSet<int>
        {
           1,2,3,4,5
        };
    }

    private void FilmChanging()
    {
        Films = _context.Films.ToList();
        if (!string.IsNullOrWhiteSpace(FilmName))
        {
            Films = Films.Where(p => p.FilmName.ToLower().Contains(FilmName.ToLower())).ToList();
        }
        if (!string.IsNullOrWhiteSpace(SelectedMPAA))
        {
            Films = Films.Where(p => p.MPAA == SelectedMPAA).ToList();
        }
        if (!string.IsNullOrWhiteSpace(SelectedCountry))
        {
            Films = Films.Where(p => p.Country == SelectedCountry).ToList();
        }
        if (!string.IsNullOrWhiteSpace(SelectedDuration))
        {
            Films = Films.Where(p => p.Duration.Contains(SelectedDuration)).ToList();
        }
        if (SelectedYear!=-1)
        {
            Films = Films.Where(p => p.Year>=SelectedYear).ToList();
        }
        if (SelectedRating !=-1)
        {
            Films = Films.Where(p => Math.Round((double)p.Summ / (double)p.Total, 1)>=SelectedRating).ToList();
        }
        if (SelectedGenres.Count > 0)
        {
            var TempFilms = new HashSet<Films>();
            var ThisFilms = Films;
            bool contains = false;
            foreach (var film in ThisFilms.ToList())
            {
                foreach (var genre in SelectedGenres)
                {
                    if (film.Genres.Contains(genre)) contains = true;
                    else
                    {
                        contains = false;
                        break;
                    }
                }
                if (contains) TempFilms.Add(film);
                contains = false;
            }
            Films = TempFilms.ToList();
        }

    }

    private async Task ChooseCountry(string country)
    {
        SelectedCountry = country;
        FilmChanging();
    }
    private async Task ChooseMPAA(string MPAA)
    {
        SelectedMPAA = MPAA;
        FilmChanging();   
    }

    private async Task ChooseDuration(string Duration)
    {
        SelectedDuration = Duration;
        FilmChanging();
    }

    private async Task ChooseYear(int Year)
    {
        SelectedYear = Year;
        FilmChanging();
    }

    private async Task ChooseRating(int Rating)
    {
        SelectedRating =Rating;
        FilmChanging();
    }

    private async Task ChooseGenre(string genre)
    {
        if (!SelectedGenres.Contains(genre))
            SelectedGenres.Add(genre);
        else SelectedGenres.Remove(genre);
        FilmChanging();
    }

    private async Task FilmNameChanged(string name)
    {
        FilmName=name;
        FilmChanging();
    }
}

