@using FilmReview.Data
@using FilmReview.Models
@using Microsoft.AspNetCore.Mvc
@using NomaniusMVC
@inject MyContext _context
<Dropdown>
    <DropdownToggle Color="Color.Success">
        Выберите тэги для поиска
    </DropdownToggle>
    <DropdownMenu>
        @foreach(var genre in Genres)
        {
            <DropdownItem ShowCheckbox CheckedChanged="@(()=>ChooseItem(genre))">@genre</DropdownItem>
        }
    </DropdownMenu>
</Dropdown>
<br />
<div class="container">
    @if (Films.FirstOrDefault()==null)
    {
        <Text>Таких фильмов нет</Text>
    }
    else
    {
    for (var i = 0; i < Films.Count; i += 4)
    {
        <Div Class="row">
        @for (var j = i; j < i + 4 && j < Films.Count-1; j++)
        {
           float Rating = 0;
           string link = "Home/FilmDetails/" + @Films[j].FilmID.ToString();
            if (Films[j].Total != 0)
                Rating = (float)Films[j].Summ / (float)Films[j].Total;
            <div class="col" style="margin-bottom: 10px;">
                         <Card>
                        <CardImage style="align-self:center;" Source="@Films[j].FilmImageLink" Alt="@error" Width="Width.Px(190)" Height="Height.Px(250)" />
                    <CardBody >
                        <CardTitle>@Films[j].FilmName @Rating</CardTitle>
                        <CardText>@Films[j].Tags</CardText>
                      <Blazorise.Link To="@link">Подробнее</Blazorise.Link>
                    </CardBody>
                </Card>
            </div>
        }
            </Div>
}
    }
</div>

@code {
    public string error = "Картинка фильма";
    public List<Films> Films{ get; set; }
    public IEnumerable<string> Genres{ get; set; }
    public List<string> SelectedGenres { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Films = _context.Films.ToList();
        SelectedGenres = new List<string>();
        Genres = new HashSet<string>
        {
            "драма",
            "боевик",
            "комедия",
            "триллер",
            "исторический",
            "фантастика",
            "биография",
            "мелодрама"
        };
    }
    public async Task ChooseItem(string genre)
    {
        if (!SelectedGenres.Contains(genre))
            SelectedGenres.Add(genre);
        else SelectedGenres.Remove(genre);
        var AllFilms = _context.Films.ToList();
        if (SelectedGenres.FirstOrDefault() != null)
        {
            var TempFilms = new HashSet<Films>();
            foreach (var tag in SelectedGenres)
            {
                foreach (var film in AllFilms.Where(p => p.Tags.Contains(tag)).ToList())
                {
                    TempFilms.Add(film);
                }

            }
            Films = TempFilms.ToList();

        }
        else Films = AllFilms;
    }
}

