@using FilmReview.Models
@using FilmReview.Data
@using Microsoft.EntityFrameworkCore
@inject MyContext _context

<img src="@FilmsAndData.Film.FilmImageLink" />
<h1>@((float)FilmsAndData.Film.Summ / (float)FilmsAndData.Film.Total) </h1>

@if (FilmsAndData.isAdmin != null)
{
    <Div class="display-6">
        <Blazorise.Rating  TextColor="TextColor.Success" @bind-SelectedValue="@FilmsAndData.Rank" MaxValue="5" @onclick="RateFilm" />
    </Div>
}

<Text TextSize="TextSize.Small">О фильме: @FilmsAndData.Film.About</Text>
<br/>
<Badge Color="Color.Success">Тэги: @FilmsAndData.Film.Tags</Badge>
<Badge Color="Color.Success">Страна: @FilmsAndData.Film.Country</Badge>
<Badge Color="Color.Success">Год: @FilmsAndData.Film.Year</Badge>
<Badge Color="Color.Success">Длительность: @FilmsAndData.Film.Duration </Badge>
<Badge Color="Color.Success">MPAA: @FilmsAndData.Film.MPAA </Badge>

@if (FilmsAndData.isAdmin != null)
{
    <Form>
         <FieldBody ColumnSize="ColumnSize.Is10">
             <TextEdit @bind-Text="TextComment" Placeholder="Комментарий..." />
         </FieldBody>
        <Button Color="Color.Primary" Clicked="WriteComment" Type="ButtonType.Submit" PreventDefaultOnSubmit>Отправить</Button>
 </Form>
    <br />
}

@if(Comments.FirstOrDefault()!=null)
{
    foreach (var comment in Comments)
    {
        @Comment(FilmsAndData.isAdmin,comment);
        @if (CommentingOn == comment.CommentID)
        {
            <Form>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit @bind-Text="TextSubComment" Placeholder="Комментарий к комментарию..." />
                </FieldBody>
                <Button Color="Color.Primary" Clicked="WriteCommentOnComment" Type="ButtonType.Submit"
                    PreventDefaultOnSubmit>Отправить</Button>
             </Form>
        }
        @if (SubComments.FirstOrDefault(p=>p.TrackingOn==comment.CommentID)!=null)
        {
            var CurrentSubComments = SubComments.Where(p => p.TrackingOn == comment.CommentID);
            @foreach (var subcomment in CurrentSubComments)
            {
                @SubComment(subcomment);
            }
                <br/>
        }
}
}

@code {
    private RenderFragment SubComment(Comments subcomment)
    {
        return@<Div Padding="Padding.Is5.FromStart">
        <Card Background="Background.Light" Style="width:600px">
            <CardTitle Size="3">
                @Users.FirstOrDefault(p => p.UserID == subcomment.UserID).NickName
            </CardTitle>
            <CardText>@subcomment.Text</CardText>
            <Div TextAlignment="TextAlignment.End" Padding="Padding.Is1.FromEnd">
            </Div>
        </Card>
    </Div>;
    }

    private RenderFragment Comment(bool? isAdmin,Comments comment)
    {
        if (isAdmin != null)
        {
            return
            @<Card Background="Background.Light" Style="width:600px">
                <CardTitle Size="3">
                    @Users.FirstOrDefault(p => p.UserID == comment.UserID).NickName
                </CardTitle>
                <CardText>comment.Text</CardText>
                    <CardText><Button><Icon TextColor="TextColor.Success" Name="IconName.PlusCircle"></Icon></Button> @comment.Likes<Button><Icon TextColor="TextColor.Danger" Name="IconName.MinusCircle"></Icon></Button> @comment.Dislikes</CardText>
                    <Div TextAlignment="TextAlignment.End" Padding="Padding.Is1.FromEnd">
                        <Button Color="Color.Success" Clicked="(()=>CommentEnable(comment.CommentID))">
                            Ответить
                            <Icon Name="IconName.ArrowDown"></Icon>
                        </Button>
                    </Div>
            </Card>;
        }
        else
            return 
            @<Card Background="Background.Light" Style="width:600px">
                <CardTitle Size="3">
                    @Users.FirstOrDefault(p => p.UserID == comment.UserID).NickName
                </CardTitle>
                <CardText>comment.Text</CardText>
                <CardText><Button><Icon TextColor="TextColor.Success" Name="IconName.PlusCircle"></Icon></Button> @comment.Likes<Button><Icon TextColor="TextColor.Danger" Name="IconName.MinusCircle"></Icon></Button> @comment.Dislikes</CardText>
            </Card>;
    }

    [Parameter]
    public FilmsAndData FilmsAndData { get; set; }
    public List<Comments> Comments { get; set; } 
    public List<Comments> SubComments { get; set; }
    public IEnumerable<Users> Users { get; set; }
    int oldRank = 0;
    public bool pressed { get; set; }
    public string TextComment { get; set; } = "";
    public string TextSubComment { get; set; } = "";
    public int? CommentingOn { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (FilmsAndData.Rank != 0)
        {
            oldRank = FilmsAndData.Rank;
            pressed = true;
        }
        else pressed = false;
        var AllComments = _context.Comments.Where(p => p.FilmID == FilmsAndData.Film.FilmID).ToList();
        Comments = AllComments.Where(p => p.TrackingOn == null).ToList();
        SubComments = AllComments.Where(p => p.TrackingOn != null).ToList();
        Users = _context.Users.ToList();
    }

    private async Task RateFilm()
    {
        if (FilmsAndData.Rank > 0 && FilmsAndData.Rank < 6)
        {
            Reviews review = _context.Reviews.FirstOrDefault(p => p.ReviewID == FilmsAndData.ReviewID);
            if (review == null) review = new Reviews();
            review.UserID = (int)FilmsAndData.currentUserID;
            review.Rank =(int)FilmsAndData.Rank;
            Films film =_context.Films.FirstOrDefault(p=>p.FilmID==FilmsAndData.Film.FilmID);
            review.FilmID = FilmsAndData.Film.FilmID;
            if (FilmsAndData.ReviewID!= null||pressed==true)
            {
                film.Summ -= oldRank;
                film.Summ += review.Rank;
            }
            else
            {
                film.Total += 1;
                film.Summ += review.Rank;
                pressed = true;
                _context.Reviews.Add(review);
            }
            oldRank = FilmsAndData.Rank;
            FilmsAndData.Film = film;
            await _context.SaveChangesAsync();
        }
    }

    private async Task WriteComment()
    {
        if (TextComment != "")
        {
            Comments Comment = new Comments();
            Comment.Text = TextComment;
            Comment.Row = 0;
            Comment.Likes = 0;
            Comment.Dislikes = 0;
            Comment.FilmID=FilmsAndData.Film.FilmID;
            Comment.UserID =(int)FilmsAndData.currentUserID;
            TextComment = "";
            Comments.Add(Comment);
            _context.Comments.Add(Comment);
            await _context.SaveChangesAsync();
        }
    }

    private async Task CommentEnable(int CommentID)
    {
        CommentingOn = CommentID;
    }

    private async Task WriteCommentOnComment()
    {
        if (TextSubComment != "")
        {
            Comments Comment = new Comments();
            Comment.Text = TextSubComment;
            Comment.Row = 1;
            Comment.Likes = 0;
            Comment.Dislikes = 0;
            Comment.FilmID = FilmsAndData.Film.FilmID;
            Comment.UserID = (int)FilmsAndData.currentUserID;
            Comment.TrackingOn=CommentingOn;
            TextSubComment = "";
            _context.Comments.Add(Comment);
            await _context.SaveChangesAsync();
            SubComments.Add(Comment);
        }
    }
}
