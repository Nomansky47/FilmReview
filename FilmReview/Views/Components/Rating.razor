@using FilmReview.Models
@using FilmReview.Data
@using Microsoft.EntityFrameworkCore
@inject MyContext _context
<Div Display="Display.Flex.Row">
<Div>
<img src="@FilmsAndData.Film.FilmImageLink" />
    </Div>
    @if (VideoLink != "")
    {
        <Div Padding="Padding.Is5.FromStart">
        <iframe width="560" height="315" src="@VideoLink" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
        </Div>
    }
    </Div>
<Div Display="Display.Flex.Column" Padding="Padding.Is2.FromTop" Flex="Flex.JustifyContent.Between">
    <Div>
        <Text TextSize="TextSize.Small">О фильме: @FilmsAndData.Film.About</Text>
            <Div Padding="Padding.Is2.FromTop">
            <Badge Color="Color.Success">Тэги: @FilmsAndData.Film.Tags</Badge>
            <Badge Color="Color.Success">Страна: @FilmsAndData.Film.Country</Badge>
            <Badge Color="Color.Success">Год: @FilmsAndData.Film.Year</Badge>
            <Badge Color="Color.Success">Длительность: @FilmsAndData.Film.Duration </Badge>
            <Badge Color="Color.Success">MPAA: @FilmsAndData.Film.MPAA </Badge>
            </Div>
        </Div>
        <Div Class="display-6" Padding="Padding.Is2.FromTop" >
            @if (FilmsAndData.isAdmin != null)
        {
            <Blazorise.Text TextSize="TextSize.Large"> <Blazorise.Rating TextColor="TextColor.Success" @bind-SelectedValue="@FilmsAndData.Rank" MaxValue="5" @onclick="RateFilm" />  @(Math.Round((double)FilmsAndData.Film.Summ / (double)FilmsAndData.Film.Total, 1)) / 5 </Blazorise.Text>

        }
        else
        {
            <Blazorise.Text TextSize="TextSize.Large"> Рейтинг: @(Math.Round((double)FilmsAndData.Film.Summ / (double)FilmsAndData.Film.Total, 1)) / 5</Blazorise.Text>

        }
    </Div>
</Div>
@if (FilmsAndData.isAdmin != null)
{
    <Div Padding="Padding.Is2.FromTop">
    <Form >
            
        <FieldBody ColumnSize="ColumnSize.Is10">
             <TextEdit @bind-Text="TextComment" Placeholder="Комментарий..." />
         </FieldBody>
            <Div Padding="Padding.Is2.FromTop">
        <Button Color="Color.Primary" Clicked="WriteComment" Type="ButtonType.Submit" PreventDefaultOnSubmit>Отправить</Button>
         </Div>
    </Form>
 </Div>
}


@if(Comments.FirstOrDefault()!=null)
{
    <Div Padding="Padding.Is2.FromTop">
    @foreach (var comment in Comments)
    {
        @Comment(FilmsAndData.isAdmin,comment,Padding.Is2.FromTop);
        @if (SubComments.FirstOrDefault(p=>p.TrackingOn==comment.CommentID)!=null)
        {
            var CurrentSubComments = SubComments.Where(p => p.TrackingOn == comment.CommentID).ToList();
            @foreach (var subcomment in CurrentSubComments)
            {
                @Comment(FilmsAndData.isAdmin, subcomment, Padding.Is4.FromStart.Is2.FromTop);
                @if (SubComments.FirstOrDefault(p => p.TrackingOn == subcomment.CommentID) != null)
                {
                    var CurrentSubComments2 = SubComments.Where(p => p.TrackingOn == subcomment.CommentID).ToList();
                    @foreach (var subcomment2 in CurrentSubComments2)
                    {<Div Padding="Padding.Is3.FromStart">
                        @Comment(FilmsAndData.isAdmin, subcomment2, Padding.Is5.FromStart.Is2.FromTop)
                        </Div>
                        @if (SubComments.FirstOrDefault(p => p.TrackingOn == subcomment2.CommentID) != null)
                        {
                            var CurrentSubComments3 = SubComments.Where(p => p.TrackingOn == subcomment2.CommentID).ToList();
                            @foreach (var subcomment3 in CurrentSubComments3)
                            {
                                <Div Padding="Padding.Is4.FromStart">
                                @Comment(FilmsAndData.isAdmin, subcomment3, Padding.Is5.FromStart.Is2.FromTop)
                                </Div>
                                @if (SubComments.FirstOrDefault(p => p.TrackingOn == subcomment3.CommentID) != null)
                                {
                                    var CurrentSubComments4 = SubComments.Where(p => p.TrackingOn == subcomment3.CommentID).ToList();
                                 @foreach (var subcomment4 in CurrentSubComments4)
                                    {
                                        <Div Padding="Padding.Is5.FromStart">
                                      @LastComment(subcomment4)
                                      </Div>
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
}
    </Div>
}

@code {

    [Parameter]
    public FilmsData FilmsAndData {get;set;}
    public List<Comments> Comments { get; set; } 
    public List<Comments> SubComments { get; set; }
    public IEnumerable<Users> Users { get; set; }
    public string VideoLink { get; set; } = "";
    int oldRank = 0;
    public bool pressed { get; set; }
    public string TextComment { get; set; } = "";
    public string TextSubComment { get; set; } = "";
    public int? CommentingOn { get; set; }
    public int RowCounter=1;

    protected override async Task OnInitializedAsync()
    {
        if (FilmsAndData.Rank != 0)
        {
            oldRank = FilmsAndData.Rank;
            pressed = true;
        }
        else pressed = false;
        var AllComments = _context.Comments.Where(p => p.FilmID == FilmsAndData.Film.FilmID).ToList();
        var video = _context.Videos.FirstOrDefault(p => p.FilmID == FilmsAndData.Film.FilmID);
        if (video != null) VideoLink = video.Link;
        Comments = AllComments.Where(p => p.TrackingOn == null).ToList();
        SubComments = AllComments.Where(p => p.TrackingOn != null).ToList();
        Users = _context.Users.ToList();
    }

    private RenderFragment LastComment(Comments subcomment)
    {
        return@<Div Padding="Padding.Is5.FromStart">
        <Card Background="Background.Light" Style="width:600px">
            <CardTitle Size="3">
                @Users.FirstOrDefault(p => p.UserID == subcomment.UserID).NickName
            </CardTitle>
            <CardText>@subcomment.Text</CardText>
            <CardText><Button><Icon TextColor="TextColor.Success" Name="IconName.PlusCircle"></Icon></Button> @subcomment.Likes<Button><Icon TextColor="TextColor.Danger" Name="IconName.MinusCircle"></Icon></Button> @subcomment.Dislikes</CardText>
        </Card>
    </Div>
    ;
    }

    private RenderFragment Comment(bool? isAdmin, Comments comment, IFluentSpacingOnBreakpointWithSideAndSize padding)
    {
        if (isAdmin != null)
        {
            if (CommentingOn == comment.CommentID)
            {
                return
@<Div Padding="@padding">
        <Card Background="@Background.Light" Style="width:600px">
        <CardTitle Size="3">
            @Users.FirstOrDefault(p => p.UserID == comment.UserID).NickName
        </CardTitle>
        <CardText>@comment.Text</CardText>
        <CardText>
                <Button Clicked="()=>Like(comment.CommentID)">
        <Icon TextColor="TextColor.Success" Name="IconName.PlusCircle"></Icon>
        </Button> 
        @comment.Likes<Button Clicked="()=>Dislike(comment.CommentID)">
        <Icon TextColor="TextColor.Danger" Name="IconName.MinusCircle"></Icon>
        </Button> @comment.Dislikes</CardText>
        <Div TextAlignment="TextAlignment.End" Padding="Padding.Is1.FromEnd">
            <Button Color="Color.Success" Clicked="()=>CommentEnable(comment.CommentID)">
                Ответить
                <Icon Name="IconName.ArrowDown"></Icon>
            </Button>
        </Div>
    </Card>
                <Form>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit @bind-Text="TextSubComment" Placeholder="Комментарий к комментарию..." />
                    </FieldBody>
                    <Button Color="Color.Primary" Clicked="()=>WriteCommentOnComment(1)" Type="ButtonType.Submit"
                                PreventDefaultOnSubmit>
                     Отправить
                 </Button>
    </Form></Div>
    ;
            }
            else
                return
@<Div Padding="@padding">
    <Card Background="Background.Light" Style="width:600px">
        <CardTitle Size="3">
            @Users.FirstOrDefault(p => p.UserID == comment.UserID).NickName
        </CardTitle>
        <CardText>@comment.Text</CardText>
            <CardText>
                <Button Clicked="()=>Like(comment.CommentID)">
        <Icon TextColor="TextColor.Success" Name="IconName.PlusCircle"></Icon></Button>
        @comment.Likes
                <Button Clicked="()=>Dislike(comment.CommentID)">
                    <Icon TextColor="TextColor.Danger" Name="IconName.MinusCircle"></Icon>
        </Button> @comment.Dislikes</CardText>
        <Div TextAlignment="TextAlignment.End" Padding="Padding.Is1.FromEnd">
            <Button Color="Color.Success">
                Ответить
                <Icon Name="IconName.ArrowDown"></Icon>
            </Button>
        </Div>
    </Card>
    </Div>;
        }
        else
            return 
            @<Div Padding="@padding">
            <Card Background="Background.Light" Style="width:600px">
                <CardTitle Size="3">
                    @Users.FirstOrDefault(p => p.UserID == comment.UserID).NickName
                </CardTitle>
                <CardText>@comment.Text</CardText>
                <CardText><Button><Icon TextColor="TextColor.Success" Name="IconName.PlusCircle"></Icon></Button> @comment.Likes<Button><Icon TextColor="TextColor.Danger" Name="IconName.MinusCircle"></Icon></Button> @comment.Dislikes</CardText>
            </Card>
            </Div>
    ;
    }

    private async Task Like(int commentID)
    {
        Likes Likes = new Likes();
        Likes.CommentID = commentID;
        Likes.UserID=(int)FilmsAndData.currentUserID;
        if (_context.Likes.FirstOrDefault(p => p.UserID == Likes.UserID && p.CommentID == Likes.CommentID) == null)
        {
            if (_context.Dislikes.FirstOrDefault(p => p.UserID == Likes.UserID && p.CommentID == Likes.CommentID) != null)
            {
                _context.Dislikes.RemoveRange(_context.Dislikes.FirstOrDefault(p => p.UserID == Likes.UserID && p.CommentID == Likes.CommentID));
                _context.Comments.FirstOrDefault(p => p.CommentID == Likes.CommentID).Dislikes--;
            }
            _context.Likes.Add(Likes);
            _context.Comments.FirstOrDefault(p => p.CommentID == Likes.CommentID).Likes++;
            await _context.SaveChangesAsync();
        }
    }

    private async Task Dislike(int commentID)
    {
        Dislikes Dislikes = new Dislikes();
        Dislikes.CommentID = commentID;
        Dislikes.UserID = (int)FilmsAndData.currentUserID;
        if (_context.Dislikes.FirstOrDefault(p=>p.UserID==Dislikes.UserID&&p.CommentID==Dislikes.CommentID)==null)
        {
            if(_context.Likes.FirstOrDefault(p => p.UserID == Dislikes.UserID && p.CommentID == Dislikes.CommentID) != null)
            {
                _context.Likes.RemoveRange(_context.Likes.FirstOrDefault(p => p.UserID == Dislikes.UserID && p.CommentID == Dislikes.CommentID));
                _context.Comments.FirstOrDefault(p => p.CommentID == Dislikes.CommentID).Likes--;
            }
            _context.Dislikes.Add(Dislikes);
            _context.Comments.FirstOrDefault(p => p.CommentID == Dislikes.CommentID).Dislikes++;
            await _context.SaveChangesAsync();
        }
    }
    private async Task RateFilm()
    {
        if (FilmsAndData.Rank > 0 && FilmsAndData.Rank < 6)
        {
            Reviews review = _context.Reviews.FirstOrDefault(p => p.ReviewID == FilmsAndData.ReviewID);
            if (review == null) review = new Reviews();
            review.UserID = (int)FilmsAndData.currentUserID;
            review.Rank =(int)FilmsAndData.Rank;
            Films film =_context.Films.FirstOrDefault(p=>p.FilmID==FilmsAndData.Film.FilmID);
            review.FilmID = FilmsAndData.Film.FilmID;
            if (FilmsAndData.ReviewID!= null||pressed==true)
            {
                film.Summ -= oldRank;
                film.Summ += review.Rank;
            }
            else
            {
                film.Total += 1;
                film.Summ += review.Rank;
                pressed = true;
                _context.Reviews.Add(review);
            }
            oldRank = FilmsAndData.Rank;
            FilmsAndData.Film = film;
            await _context.SaveChangesAsync();
        }
    }

    private async Task WriteComment()
    {
        if (TextComment != "")
        {
            Comments Comment = new Comments();
            Comment.Text = TextComment;
            Comment.Row = 0;
            Comment.Likes = 0;
            Comment.Dislikes = 0;
            Comment.FilmID=FilmsAndData.Film.FilmID;
            Comment.UserID =(int)FilmsAndData.currentUserID;
            TextComment = "";
            Comments.Add(Comment);
            _context.Comments.Add(Comment);
            await _context.SaveChangesAsync();
        }
    }

    private async Task CommentEnable(int CommentID)
    {
        CommentingOn = CommentID;
    }

    private async Task WriteCommentOnComment(int row)
    {
        if (TextSubComment != "")
        {
            Comments Comment = new Comments();
            Comment.Text = TextSubComment;
            Comment.Row = row;
            Comment.Likes = 0;
            Comment.Dislikes = 0;
            Comment.FilmID = FilmsAndData.Film.FilmID;
            Comment.UserID = (int)FilmsAndData.currentUserID;
            Comment.TrackingOn=CommentingOn;
            TextSubComment = "";
            _context.Comments.Add(Comment);
            await _context.SaveChangesAsync();
            SubComments.Add(Comment);
        }
    }
}
